Here’s a **detailed technical explanation** of how **Selection Sort, Insertion Sort, Bubble Sort, Merge Sort, and Quick Sort** work—each with **example, dry-run, and internal logic**.

---

## 1. **Selection Sort**

### 💡 **Working Principle:**

Select the minimum element and place it at the correct position.

### 📈 Time Complexity:

* Worst, Avg, Best: **O(n²)**
* Space: **O(1)** (in-place)

### 🔁 Algorithm:

1. For each index `i` from `0 to n-1`:
2. Find the minimum element from `i` to `n-1`
3. Swap it with the element at `i`

### 🧠 Dry-Run (Example: `[64, 25, 12, 22, 11]`):

```
Pass 1:
Find min from index 0 to 4 => 11, swap with 64
→ [11, 25, 12, 22, 64]

Pass 2:
Find min from index 1 to 4 => 12, swap with 25
→ [11, 12, 25, 22, 64]

Pass 3:
Find min from index 2 to 4 => 22, swap with 25
→ [11, 12, 22, 25, 64]

Pass 4:
Find min from index 3 to 4 => 25, already in place
→ [11, 12, 22, 25, 64]
```

---

## 2. **Insertion Sort**

### 💡 **Working Principle:**

Insert the current element into its correct position in the **sorted left side**.

### 📈 Time Complexity:

* Worst: **O(n²)** | Best: **O(n)** (already sorted)
* Space: **O(1)** (in-place)

### 🔁 Algorithm:

1. Start from index 1, iterate to `n-1`
2. Compare current element (`key`) with previous elements
3. Shift all elements greater than key one position to right
4. Insert key in the correct place

### 🧠 Dry-Run (Example: `[64, 25, 12, 22, 11]`):

```
Start from index 1 (25):
→ Compare 25 < 64 → shift 64
→ Insert 25 → [25, 64, 12, 22, 11]

Index 2 (12):
→ Shift 64, 25
→ Insert 12 → [12, 25, 64, 22, 11]

Index 3 (22):
→ Shift 64, 25
→ Insert 22 → [12, 22, 25, 64, 11]

Index 4 (11):
→ Shift 64, 25, 22, 12
→ Insert 11 → [11, 12, 22, 25, 64]
```

---

## 3. **Bubble Sort**

### 💡 **Working Principle:**

Repeatedly swap adjacent elements if they are in the wrong order.

### 📈 Time Complexity:

* Worst & Avg: **O(n²)** | Best: **O(n)** (optimized version)
* Space: **O(1)**

### 🔁 Algorithm:

1. Traverse from 0 to `n-1`
2. Compare adjacent elements
3. Swap if they’re in the wrong order
4. Largest bubbles to the end each pass

### 🧠 Dry-Run (Example: `[64, 25, 12, 22, 11]`):

```
Pass 1:
→ [25, 12, 22, 11, 64]
Pass 2:
→ [12, 22, 11, 25, 64]
Pass 3:
→ [12, 11, 22, 25, 64]
Pass 4:
→ [11, 12, 22, 25, 64]
```

---

## 4. **Merge Sort**

### 💡 **Working Principle:**

Divide the array into halves, recursively sort them, then merge the sorted halves.

### 📈 Time Complexity:

* All cases: **O(n log n)**
* Space: **O(n)** (uses temp arrays)

### 🔁 Algorithm:

1. Divide array into two halves
2. Recursively sort the two halves
3. Merge them in sorted order

### 🧠 Dry-Run (Example: `[64, 25, 12, 22, 11]`):

```
Split: [64, 25] and [12, 22, 11]
→ Sort [64, 25] → [25, 64]
→ Sort [12, 22, 11] → 
   - Split [12] & [22,11]
   - Sort [22,11] → [11,22]
   - Merge: [12,11,22] → [11,12,22]
Merge [25,64] and [11,12,22] → [11,12,22,25,64]
```

### 🧩 Merge Function Logic:

Merge two sorted arrays using two pointers.

---

## 5. **Quick Sort**

### 💡 **Working Principle:**

Choose a pivot, partition array into two—left < pivot, right > pivot, and recurse.

### 📈 Time Complexity:

* Best & Avg: **O(n log n)**
* Worst: **O(n²)** (if pivot is always max/min)
* Space: **O(log n)** (stack space)

### 🔁 Algorithm:

1. Choose a pivot (commonly last or random)
2. Partition array:

   * Elements < pivot on left
   * Elements > pivot on right
3. Recursively sort both sides

### 🧠 Dry-Run (Example: `[64, 25, 12, 22, 11]`, pivot = 11):

```
Initial: [64, 25, 12, 22, 11]
→ Partition: move elements < 11 to left
→ [11, 25, 12, 22, 64] with pivot at index 0

Recur on [25, 12, 22, 64] → pivot = 64
→ Already sorted relative to 64

Now recur on [25, 12, 22]:
→ pivot = 22 → [12, 22, 25]
Final: [11, 12, 22, 25, 64]
```

### 🧩 Partition Logic:

* Use two pointers
* Swap elements to ensure correct pivot placement

---

## 🔚 Summary (Bullet Format):

* **Selection Sort:**

  * Select minimum each time, place at start
  * Time: O(n²), Space: O(1)
  * Example: `[64, 25, 12, 22, 11] → [11, 12, 22, 25, 64]`

* **Insertion Sort:**

  * Pick current and insert in sorted left part
  * Time: O(n²), Best case O(n) if sorted
  * Space: O(1)
  * Shifts elements > key

* **Bubble Sort:**

  * Adjacent swaps, largest “bubbles” to end
  * Time: O(n²), Best O(n) with flag
  * Space: O(1)
  * Multiple passes

* **Merge Sort:**

  * Divide & conquer; merge sorted subarrays
  * Time: O(n log n), Space: O(n)
  * Stable sort

* **Quick Sort:**

  * Divide by pivot; partition into < and > subarrays
  * Time: O(n log n) avg, O(n²) worst
  * Space: O(log n) recursive
  * Faster than merge sort in practice for in-place

Let me know if you want me to implement any/all of these in Java with dry-run comments.
